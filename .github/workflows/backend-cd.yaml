name: Python CD

on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches:
      - main

jobs:
  test:  # Job for running tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/backend
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
        cache-dependency-path: './starter/backend/Pipfile.lock'
    # You can test your matrix by printing the current Python version
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Install pipenv
      run: sudo pip install pipenv
    - name: Install dependencies
      run: pipenv install
    - name: Run the tests
      run: pipenv run test

  build:
    runs-on: ubuntu-latest
    needs: test  # Wait for test job to complete
    defaults:
      run:
        shell: bash
        working-directory: ./starter/backend
    # Expose step outputs as job outputs
    outputs:
      repo-image-name: ${{ steps.build-push-image.outputs.repo-image-name }}
    steps:
    - uses: actions/checkout@v4
    # Configure AWS credential environment variables
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_IAM_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    # Login to Amazon ECR Private
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    # Build and push a Docker image
    - name: Build, tag, and push the image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Wait for build job to complete
    steps:
    - uses: actions/checkout@v4
    # Configure AWS credential environment variables
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_IAM_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    # Make sure you're kubeconfig is configured for the EKS cluster
    - name: Update a kubeconfig file
      env:
        AWS_EKS_CLUSTER_NAME: ${{ vars.AWS_EKS_CLUSTER_NAME }}
      run: |
        aws sts get-caller-identity
        aws eks update-kubeconfig --region $AWS_REGION --name $AWS_EKS_CLUSTER_NAME
        kubectl config current-context
        kubectl get svc
    # Login to Amazon ECR Private
    - name: Login to Amazon ECR
      id: login-ecr-deploy
      uses: aws-actions/amazon-ecr-login@v2
    # Apply the manifests to the cluster
    - name: Apply the manifests to the cluster
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd ./starter/backend/k8s
        kustomize edit set image backend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        kustomize build | kubectl apply -f -