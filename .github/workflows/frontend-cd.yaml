name: Frontend Continuous Deployment

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    strategy:
      matrix:
        node-version: [18]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Nodejs
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies & Running linter
      run: |
        npm ci
        npm run lint

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    strategy:
      matrix:
        node-version: [18]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Nodejs
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies & Run tests
      run: |
        npm ci
        npm run test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: ECR login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag image and push to ecr
      env:
        IMAGE_NAME: frontend
        APP_MOVIE_API_URL: http://localhost:5000
      run: |
        IMAGE_TAG=${{ github.sha::7 }}
        docker build -t ${{ env.IMAGE_NAME }} --build-arg=REACT_APP_MOVIE_API_URL=${{ env.APP_MOVIE_API_URL }} .
        docker tag ${{ env.IMAGE_NAME }}:$IMAGE_TAG ${{ secrets.FRONTEND_ECR_REPOSITORY }}:$IMAGE_TAG
        docker push ${{ secrets.FRONTEND_ECR_REPOSITORY }}:$IMAGE_TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Configure kubectl
      env:
        EKS_CLUSTER_NAME: cluster
      run: |
        aws sts get-caller-identity
        aws eks --region ${{ secrets.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }}
        kubectl config current-context

    - name: ECR login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Deploy kubernetes manifests
      run: |
        cd ./starter/frontend/k8s
        IMAGE_TAG=${{ github.sha::7 }}
        kustomize edit set image frontend=${{ secrets.FRONTEND_ECR_REPOSITORY }}:$IMAGE_TAG
        kustomize build | kubectl apply -f -