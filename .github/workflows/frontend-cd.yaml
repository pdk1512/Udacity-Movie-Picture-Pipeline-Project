name: Frontend Continuous Deployment

on:
  pull_request:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    strategy:
      matrix:
        node-version: [18]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Nodejs
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies & Running linter
      run: |
        npm ci
        npm run lint

  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    strategy:
      matrix:
        node-version: [18]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Nodejs
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install dependencies & Run tests
      run: |
        npm ci
        npm run test

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        shell: bash
        working-directory: ./starter/frontend
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_IAM_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1

    - name: ECR login
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag image and push to ecr
      env:
        IMAGE_NAME: frontend
        IMAGE_TAG: lastest
        APP_MOVIE_API_URL: http://localhost:5000
      run: |
        docker build -t ${{ env.IMAGE_NAME }} --build-arg=REACT_APP_MOVIE_API_URL=${{ env.APP_MOVIE_API_URL }} .
        docker tag ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ secrets.FRONTEND_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        docker push ${{ secrets.FRONTEND_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    # Configure AWS credential environment variables
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_IAM_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    # Make sure you're kubeconfig is configured for the EKS cluster
    - name: Update a kubeconfig file
      env:
        AWS_EKS_CLUSTER_NAME: ${{ vars.AWS_EKS_CLUSTER_NAME }}
      run: |
        aws sts get-caller-identity
        aws eks update-kubeconfig --region $AWS_REGION --name $AWS_EKS_CLUSTER_NAME
        kubectl config current-context
        kubectl get svc
    # Login to Amazon ECR Private
    - name: Login to Amazon ECR
      id: login-ecr-deploy
      uses: aws-actions/amazon-ecr-login@v2
    # Apply the manifests to the cluster
    - name: Apply the manifests to the cluster
      env:
        ECR_REGISTRY: ${{ steps.login-ecr-deploy.outputs.registry }}
        ECR_REPOSITORY: ${{ vars.AWS_ECR_REPOSITORY_WEB }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cd ./starter/frontend/k8s
        kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        kustomize build | kubectl apply -f -